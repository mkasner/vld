package main

import (
	"bytes"
	"flag"
	"fmt"
	"go/ast"
	"go/token"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"strconv"
	"strings"
	"text/template"

	_ "golang.org/x/tools/go/gcimporter"
)

var (
	typeNames = flag.String("type", "", "comma-separated list of type names; must be set")
	output    = flag.String("output", "", "output file name; default srcdir/<type>_vld.go")
	rp        = flag.String("rp", "", "comma-separated list of rule packages")
)

// Usage is a replacement usage function for the flags package.
func Usage() {
	fmt.Fprintf(os.Stderr, "Usage of %s:\n", os.Args[0])
	fmt.Fprintf(os.Stderr, "\tvld [flags] -type T [directory]\n")
	fmt.Fprintf(os.Stderr, "\tvld [flags[ -type T files... # Must be a single package\n")
	fmt.Fprintf(os.Stderr, "Flags:\n")
	flag.PrintDefaults()
}

func main() {
	log.SetFlags(0)
	log.SetPrefix("vld: ")
	flag.Usage = Usage
	flag.Parse()
	if len(*typeNames) == 0 {
		flag.Usage()
		os.Exit(2)
	}
	types := strings.Split(*typeNames, ",")

	// We accept either one directory or a list of files. Which do we have?
	args := flag.Args()
	if len(args) == 0 {
		// Default: process whole package in current directory.
		args = []string{"."}
	}

	// Parse the package once.
	var (
		dir string
		g   Generator
	)
	if len(args) == 1 && isDirectory(args[0]) {
		dir = args[0]
		g.parsePackageDir(args[0])
	} else {
		dir = filepath.Dir(args[0])
		g.parsePackageFiles(args)
	}

	rulePackages := []string{"github.com/mkasner/vld"}
	providedRulePackages := *rp
	if providedRulePackages != "" {
		for _, rp := range strings.Split(providedRulePackages, ",") {
			rulePackages = append(rulePackages, strings.TrimSpace(rp))
		}
	}

	// Print the header and package clause.
	g.Printf("// generated by vld %s; DO NOT EDIT\n", strings.Join(os.Args[1:], " "))
	g.Printf("\n")
	g.Printf("package %s", g.pkg.name)
	g.Printf("\n")
	for _, rp := range rulePackages {
		g.Printf("import \"%s\"\n", rp)
	}

	log.Printf("%+v\n", types)
	// Run generate for each type.
	for _, typeName := range types {
		g.generate(typeName, rulePackages)
	}

	// // Format the output.
	src := g.format()

	// Write to file.
	outputName := *output
	if outputName == "" {
		baseName := "vld.go"
		outputName = filepath.Join(dir, strings.ToLower(baseName))

	}

	// fmt.Printf("%s\n", string(src))
	err := ioutil.WriteFile(outputName, src, 0644)
	if err != nil {
		log.Fatalf("writing output: %s", err)
	}
}

// Generator holds the state of the analysis. Primarily used to buffer
// the output for format.Source.
type Generator struct {
	buf bytes.Buffer // Accumulated output.
	pkg *Package     // Package we are scanning.
}

func (g *Generator) Printf(format string, args ...interface{}) {
	fmt.Fprintf(&g.buf, format, args...)
}

// File holds a single parsed file and associated data.
type File struct {
	pkg  *Package  // Package to which this file belongs.
	file *ast.File // Parsed AST.
	// These fields are reset for each type being generated.
	typeName      string // Name of the constant type.
	fields        []Field
	vldRules      []VldRule
	overrideExist bool // If override exists in some other file
}

// generate produces the String method for the named type.
func (g *Generator) generate(typeName string, rulePackages []string) {
	ruleRepo := g.fetchRuleRepo(rulePackages)
	for _, file := range g.pkg.files {
		// Set the state for this run of the walker.
		file.typeName = typeName
		if file.file != nil {
			file.fields = make([]Field, 0)
			file.typeName = typeName
			ast.Inspect(file.file, file.genDecl)
			if len(file.fields) > 0 {
				overrideExist := g.fetchOverride(typeName)
				g.buildValidateFn(typeName, file.fields, ruleRepo, overrideExist)
			}
		}
	}
}

type Field struct {
	Name  string
	Rules []Rule
}

type Rule struct {
	Key   string
	Value string
}

type Validation struct {
	Func    string
	Field   string
	Value   string
	Package string
}

// genDecl processes one declaration clause.
func (f *File) genDecl(node ast.Node) bool {
	decl, ok := node.(*ast.GenDecl)
	if !ok || decl.Tok != token.TYPE {
		// We only care about type declarations.
		return true
	}
	// The name of the type of the constants we are declaring.
	// Can change if this is a multi-element declaration.
	typ := ""
	// Loop over the elements of the declaration. Each element is a ValueSpec:
	// a list of names possibly followed by a type, possibly followed by values.
	// If the type and value are both missing, we carry down the type (and value,
	// but the "go/types" package takes care of that).
	for _, spec := range decl.Specs {
		tspec := spec.(*ast.TypeSpec)
		if tspec.Type == nil {
			// "X = 1". With no type but a value, the constant is untyped.
			// Skip this vspec and reset the remembered type.
			typ = ""
			continue
		}

		if tspec.Type != nil {
			// "X T". We have a type. Remember it.
			ident := tspec.Name
			typ = ident.Name
		}
		if typ != f.typeName {
			// This is not the type we're looking for.
			continue
		}

		structType, ok := tspec.Type.(*ast.StructType)
		if !ok {
			continue
		}

		// Loop through fields of struct
		for _, field := range structType.Fields.List {
			if len(field.Names) == 0 {
				continue
			}
			ident := field.Names[0]
			fieldName := ident.Name

			// Process tags
			if field.Tag == nil {
				continue
			}
			uq, _ := strconv.Unquote(field.Tag.Value)
			var tag StructTag

			tag = StructTag(uq)

			vldRule := tag.Get("vld")
			// Ignore field
			if vldRule == "-" {
				continue
			}
			rules := processRuleTag(vldRule)
			f.fields = append(f.fields, Field{
				Name:  fieldName,
				Rules: rules,
			})
		}
	}
	return false
}

func (g *Generator) buildValidateFn(typeName string, fields []Field, repo VldRules, overrideExist bool) {
	g.Printf("\n")
	// fields := []string{"hello", "world"}
	funcs := map[string]interface{}{
		"NotLast": func(length, index int) bool {
			return index < length-1
		},
		"OverrideFn": func() string {
			return FN_OVERRIDE
		},
	}
	vldFunctions := []string{vldFn}
	if !overrideExist {
		vldFunctions = append(vldFunctions, vldOverrirdeFn)
	}
	for _, sf := range vldFunctions {

		validations := make([]Validation, 0)
		for _, field := range fields {
			for _, r := range field.Rules {
				vf := repo.byKey(r.Key)
				if vf == nil {
					continue
				}
				validations = append(validations, Validation{
					Func:    vf.Func,
					Package: vf.Package,
					Field:   field.Name,
					Value:   r.Value,
				})
			}
		}

		tmpl, err := template.New("").Funcs(funcs).Parse(sf)
		if err != nil {
			log.Println(err.Error())
			return
		}
		var buff bytes.Buffer
		err = tmpl.Execute(&buff, struct {
			TypeName    string
			Validations []Validation
		}{
			typeName,
			validations,
		})
		if err != nil {
			log.Println(err.Error())
			return
		}
		g.Printf("%s", buff.String())
	}

}
