// generated by vld -type=Transaction,Contract,Invoice -rp=git.aduro.hr/t2utils; DO NOT EDIT

package example

import "github.com/mkasner/vld"
import "git.aduro.hr/t2utils"

// Validates Transaction
func (t *Transaction) Validate(ctx vld.Context) vld.Context {
	validator := vld.New().
		Add(vld.Required(t.Hello, "Transaction.Hello")).
		Add(vld.MaxLength(12, t.Hello, "Transaction.Hello")).
		Add(vld.Required(t.World, "Transaction.World")).
		Add(vld.MaxLength(12, t.World, "Transaction.World"))

	ctx.Err = validator.Validate()

	ctx = t.ValidateOverride(ctx)
	return ctx
}

// Validate override of Transaction
// You can implement this in some other file
func (t *Transaction) ValidateOverride(ctx vld.Context) vld.Context {
	return ctx
}

// Validates Contract
func (t *Contract) Validate(ctx vld.Context) vld.Context {
	validator := vld.New().
		Add(vld.MaxInt64(20, t.Price, "Contract.Price")).
		Add(vld.Required(t.Type, "Contract.Type")).
		Add(vld.MaxLength(12, t.Type, "Contract.Type")).
		Add(vld.Required(t.Zero, "Contract.Zero")).
		Add(vld.MaxLength(12, t.Zero, "Contract.Zero"))

	ctx.Err = validator.Validate()

	ctx = t.ValidateOverride(ctx)
	return ctx
}

// Validates Invoice
func (t *Invoice) Validate(ctx vld.Context) vld.Context {
	validator := vld.New().
		Add(vld.MinFloat32(0, t.Amount, "Invoice.Amount")).
		Add(vld.Email(t.Email, "Invoice.Email")).
		Add(vld.Ip(t.IP, "Invoice.IP")).
		Add(vld.Required(t.Status, "Invoice.Status")).
		Add(vld.Required(t.Contract, "Invoice.Contract")).
		Add(t2utils.MSISDN(t.MSISDN, "Invoice.MSISDN"))

	ctx.Err = validator.Validate()

	ctx = t.ValidateOverride(ctx)
	return ctx
}

// Validate override of Invoice
// You can implement this in some other file
func (t *Invoice) ValidateOverride(ctx vld.Context) vld.Context {
	return ctx
}
